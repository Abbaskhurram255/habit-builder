{"version":3,"sources":["components/GoalItem.js","components/GoalList.js","components/NewGoalModal.js","App.js","serviceWorker.js","index.js"],"names":["GoalItem","props","colorMap","data-index","index","className","done","style","backgroundColor","color","length","title","onClick","handleDone","xmlns","viewBox","fill","width","height","d","streak","handleRemove","React","forwardRef","listRef","ref","items","map","goalItem","key","NewGoalModal","titleInput","useRef","useEffect","current","focus","shown","autoComplete","onSubmit","handleSubmit","htmlFor","id","placeholder","onChange","handleChange","value","App","useState","newGoalTitle","setNewGoalTitle","formShown","setFormShown","localStorage","getItem","JSON","parse","goalList","setGoalList","lastReset","Date","setLastReset","drake","setDrake","colorsUpdated","setColorsUpdated","scrollable","goalListRef","setItem","stringify","newLastReset","isToday","newGoalList","forEach","item","handleTouchMove","event","preventDefault","document","addEventListener","passive","drakeInit","Dragula","moves","el","source","handle","sibling","classList","contains","on","target","currentGoalList","indices","i","children","child","push","dataset","newItem","trim","window","confirm","splice","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.43ea56c4.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function GoalItem(props) {\n  const colorMap = [\n    \"var(--red)\",\n    \"var(--orange)\",\n    \"var(--green)\",\n    \"var(--blue)\",\n    \"var(--purple)\"\n  ];\n  return (\n    <article data-index={props.index} className={\"width-wrapper GoalItem \" + (props.done ? \"done\" : \"\")}>\n      <header style={{ backgroundColor: !props.color ? colorMap[props.index % colorMap.length] : `var(--${props.color})` }}>\n        <h2>{props.title}</h2>\n        <div>\n          <button\n            className=\"App-button\"\n            data-index={props.index}\n            onClick={props.handleDone}\n          >\n            Done\n          </button>\n        </div>\n      </header>\n      <footer>\n        <div className=\"justify-space-between\">\n          <svg className=\"drag-icon drag-handle\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"black\" width=\"18px\" height=\"18px\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/></svg>\n          <p className=\"streak\">\n            {props.streak} Day{props.streak === 1 ? \"\" : \"s\"}\n          </p>\n        </div>\n        <div>\n          <button data-index={props.index} onClick={props.handleRemove}>\n            Remove\n          </button>\n        </div>\n      </footer>\n    </article>\n  );\n}\n","import React from 'react';\nimport GoalItem from './GoalItem';\n\nfunction GoalList(props, listRef) {\n  return (\n    <div className=\"GoalList width-wrapper justify-center\" ref={listRef}>\n      {props.items.map((goalItem, index) => ( goalItem &&\n        <GoalItem \n          key={index}\n          index={index}\n          color={goalItem.color}\n          title={goalItem.title}\n          streak={goalItem.streak}\n          done={goalItem.done}\n          handleDone={props.handleDone}\n          handleRemove={props.handleRemove}\n        ></GoalItem>\n      ))}\n    </div>\n  ) \n}\n\nexport default React.forwardRef(GoalList);","import React, { useEffect, useRef } from 'react'\n\nexport default function NewGoalModal(props) {\n  const titleInput = useRef()\n  useEffect(()=>{\n    titleInput.current.focus();\n  })\n  return (\n    <section className={\"justify-center NewGoalModal\" + (props.shown ? '' : ' displayNone')}>\n      <form className=\"width-wrapper\" autoComplete=\"off\" onSubmit={props.handleSubmit}>\n          <label htmlFor=\"title\">Goal Title</label>\n          <input \n            ref={titleInput}\n            id=\"title\" placeholder=\"New Goal...\" \n            onChange={props.handleChange} \n            value={props.title}>\n          </input>\n          <button className=\"App-button\" onClick={props.handleSubmit}>Add</button>\n      </form>\n    </section>\n  )\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport { isToday } from \"date-fns\";\nimport Dragula from 'react-dragula';\nimport \"./App.css\";\nimport \"./Dragula.css\";\nimport GoalList from \"./components/GoalList\";\nimport NewGoalModal from \"./components/NewGoalModal\";\n\nfunction App() {\n  const [newGoalTitle, setNewGoalTitle] = useState(\"\");\n  const [formShown, setFormShown] = useState(false);\n  const [goalList, setGoalList] = useState(() => {\n    // Get the goal list from local storage, otherwise create an empty one.\n    let goalList = localStorage.getItem(\"goalList\");\n    return goalList ? JSON.parse(localStorage.getItem(\"goalList\")) : [];\n  });\n  const [lastReset, setLastReset] = useState(() => {\n    // Get the last reset date from storage, otherwise set to today.\n    const lastReset = localStorage.getItem(\"lastReset\");\n    return lastReset ? new Date(JSON.parse(lastReset)) : null;\n  });\n  const [drake, setDrake] = useState(null)\n  const [colorsUpdated, setColorsUpdated] = useState(localStorage.getItem(\"colorsUpdated\") ? true : false);\n  const scrollable = useRef();\n  const goalListRef = useRef();\n\n  useEffect(() => {\n    // Save goal list into local storage.\n    localStorage.setItem(\"goalList\", JSON.stringify(goalList));\n    goalListRef.current = goalList;\n  }, [goalList]);\n\n  useEffect(() => {\n    // Set the last reset time in local storage\n    if (!lastReset) {\n      const newLastReset = new Date();\n      localStorage.setItem(\"lastReset\", JSON.stringify(newLastReset));\n      setLastReset(newLastReset);\n    }\n\n    // Check if the goals were reset today.\n    if (isToday(lastReset)) return;\n\n    // If they weren't,\n    // copy the goals into a new list and set all status to 'not done'.\n    let newGoalList = [...goalList];\n    newGoalList.forEach(item => {\n      item.done = false;\n    });\n    setGoalList(newGoalList);\n\n    // Save into local storage that the resets have occured today.\n    const newLastReset = new Date();\n    localStorage.setItem(\"lastReset\", JSON.stringify(newLastReset));\n    setLastReset(newLastReset);\n  }, [goalList, lastReset]);\n\n  const listRef = useRef(null);\n  useEffect(() => {\n    scrollable.current = true;\n    document.addEventListener('touchmove', handleTouchMove, { passive:false });\n    if (drake) return;\n    let drakeInit = Dragula([listRef.current], {\n      moves: (el, source, handle, sibling) => {\n        return handle.classList.contains('drag-handle');\n      }\n    });\n    drakeInit.on('drag', (el, source) => {\n      scrollable.current = false;\n    })\n    drakeInit.on('drop', (el, target) => {\n      scrollable.current = true;\n      let currentGoalList = goalListRef.current;\n      let indices = []\n      let newGoalList = [];\n      for (let i = 0; i < target.children.length; i++) {\n        let child = target.children[i];\n        indices.push(child.dataset.index);\n      }\n      for (let index of indices) {\n        newGoalList.push(currentGoalList[index]);\n      }\n      localStorage.setItem(\"goalList\", JSON.stringify(newGoalList));\n    });\n    setDrake(drakeInit);\n  }, [drake, goalListRef]);\n\n  useEffect(() => {\n    if (colorsUpdated) return;\n    const colorMap = [\n      \"red\",\n      \"orange\",\n      \"green\",\n      \"blue\",\n      \"purple\"\n    ];\n    let newGoalList = [];\n    goalList.forEach((item, index) => {\n      let newItem = item;\n      if (!newItem.color) {\n        newItem.color = colorMap[index % colorMap.length]; \n      };\n      newGoalList.push(newItem);\n    });\n    setGoalList(newGoalList);\n    setColorsUpdated(true);\n    localStorage.setItem(\"colorsUpdated\", JSON.stringify(true));\n  }, [colorsUpdated, goalList]);\n\n  function toggleNewGoalForm() {\n    // Hide or show the 'new goal' input form.\n    setFormShown(!formShown);\n  }\n\n  function handleNewGoalSubmit(event) {\n    event.preventDefault();\n\n    const colorMap = [\n      \"red\",\n      \"orange\",\n      \"green\",\n      \"blue\",\n      \"purple\"\n    ];\n\n    // Make sure goal title is not empty.\n    if (!newGoalTitle) return\n\n    // save a new goal into the goal list in local storage.\n    setGoalList([\n      ...goalList,\n      {\n        title: newGoalTitle.trim(),\n        streak: 0,\n        done: false,\n        color: colorMap[(goalList.length) % (colorMap.length)]\n      }\n    ]);\n    localStorage.setItem(\"goalList\", JSON.stringify(goalList));\n\n    // Hide and reset the 'new goal' input form.\n    setFormShown(false);\n    setNewGoalTitle(\"\");\n  }\n\n  function handleTouchMove(event) {\n    if (! scrollable.current) {\n      event.preventDefault();\n    }\n  }\n\n  function handleNewGoalTitle(event) {\n    // Save the user's goal title into react's state.\n    setNewGoalTitle(event.target.value);\n  }\n\n  function handleDone(event) {\n    // Get the index of the goal chosen as 'done'.\n    const id = event.target.dataset.index;\n    let newGoalList = [...goalList];\n\n    // If goal is currently done, mark as 'not done' and decrement the streak counter.\n    if (newGoalList[id].done) {\n      newGoalList[id].done = false;\n      // Decrement the counter only if the goals have been reset today,\n      // otherwise this interaction will be discarded.\n      if (isToday(lastReset)) newGoalList[id].streak -= 1;\n    } else {\n      // Mark this 'not done' goal as done and increment the streak counter.\n      newGoalList[id].done = true;\n      newGoalList[id].streak += 1;\n    }\n\n    // Save the goal list.\n    setGoalList(newGoalList);\n  }\n\n  function handleRemove(event) {\n    // Make sure user clicked on purpose.\n    const confirmed = window.confirm(\n      \"Are you sure you would like to remove this goal?\"\n    );\n    if (!confirmed) return;\n\n    // Remove the goal from the list and save this new list.\n    const id = event.target.dataset.index;\n    let newGoalList = [...goalList];\n    newGoalList.splice(id, 1);\n    setGoalList(newGoalList);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"justify-center\">\n          <section className=\"top-bar width-wrapper justify-space-between\">\n            <h1>Daily Goals</h1>\n            <div>\n              <button className=\"App-button\" onClick={toggleNewGoalForm}>\n                New Goal\n              </button>\n            </div>\n          </section>\n        </div>\n        <NewGoalModal\n          shown={formShown}\n          title={newGoalTitle}\n          handleChange={handleNewGoalTitle}\n          handleSubmit={handleNewGoalSubmit}\n        ></NewGoalModal>\n      </header>\n      <main className=\"justify-center\">\n        <GoalList\n          ref={listRef}\n          setGoalList={setGoalList}\n          items={goalList}\n          handleDone={handleDone}\n          handleRemove={handleRemove}\n        ></GoalList>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}